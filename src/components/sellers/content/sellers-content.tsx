import * as React from "react";
import Table from "react-bootstrap/Table";
import AddCounterpartyModal from "./add-counterparty-modal";
import { useState, useEffect } from "react";
import { FaEye, FaEdit } from "react-icons/fa";
import ViewCounterpartyModal from "./view-counterparty-modal";
import EditCounterpartyModal from "./edit-counterparty-modal";
import ContractorSearch from "./contractor-search";
import { fetchCounterparties } from "../../services/api";

// export const counterparties = [
// 	{
// 		id: 1,
// 		type: "company", // üëà –≤–æ—Ç —Ç—É—Ç –Ω—É–∂–Ω—ã–π —Ç–∏–ø
// 		data: {
// 			companyName: '–û–û–û "–ì—É—Å—å –∏ —Ä—ã–±–∞"',
// 			directorName: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
// 			legalAddress: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –†—ã–±–Ω–∞—è, –¥. 1",
// 			bankName: "–†—ã–±–ë–∞–Ω–∫",
// 			account: "123456789",
// 			corpAccount: "987654321",
// 			innUr: "8856454718",
// 			kpp: "5465454646",
// 			ogrn: "1027700132195",
// 			phoneUr: "+7 (123) 456-78-90",
// 			emailUr: "gusi@ya.ru",
// 		},
// 	},
// 	{
// 		id: 2,
// 		type: "individual",
// 		data: {
// 			fullName: "–ü–µ—Ç—Ä–æ–≤ –ü–∞–≤–µ–ª –ü–µ—Ç—Ä–æ–≤–∏—á",
// 			birthDate: "1990-01-01",
// 			passportNumber: "1234 567890",
// 			passportIssueDate: "2010-01-01",
// 			birthPlace: "–≥. –°–∞—Ä–∞—Ç–æ–≤",
// 			passportIssuer: "–£–§–ú–° –†–æ—Å—Å–∏–∏",
// 			passportCode: "123-456",
// 			address: "–≥. –°–∞—Ä–∞—Ç–æ–≤, —É–ª. –õ–µ—Å–Ω–∞—è, –¥. 3",
// 			inn: "9876543210",
// 			phone: "+7 (999) 999-99-99",
// 			email: "petrov@mail.ru",
// 		},
// 	},
// ];

export const SellersContent = ({ mainFormData }) => {
	console.log(mainFormData);
	const [isModalOpen, setIsModalOpen] = useState(false);

	const openModal = () => setIsModalOpen(true);
	const closeModal = () => setIsModalOpen(false);
	const [viewModalOpen, setViewModalOpen] = useState(false);
	const [selectedData, setSelectedData] = useState<any>({});
	const [selectedType, setSelectedType] = useState<"individual" | "company">("company");

	const [editModalOpen, setEditModalOpen] = useState(false);
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
	const [searchQuery, setSearchQuery] = useState("");

	const [counterparties, setCounterparties] = useState([]);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);




	useEffect(() => {
		const loadData = async () => {
		  try {
			const data = await fetchCounterparties();
			console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	
			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏, —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
			if (Array.isArray(data)) {
			  setCounterparties(data);
			} else {
			  setError("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
			}
		  } catch (e) {
			setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤");
		  } finally {
			setLoading(false);
		  }
		};
		loadData();
	  }, []);
	
	  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
	  const filteredCounterparties =
		counterparties && Array.isArray(counterparties)
		  ? counterparties.filter((counterparty) => {
			  const query = searchQuery.toLowerCase();
			  const matches = Object.values(counterparty).some((fieldValue) =>
				String(fieldValue).toLowerCase().includes(query)
			  );
			  console.log("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:", counterparty, "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", matches); // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
			  return matches;
			})
		  : [];
	
	  console.log("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã:", filteredCounterparties); // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
	
	  const handleSave = (updatedData: any) => {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
		console.log(updatedData);
	  };

	const EyeIcon = FaEye as React.FC<{ size?: number }>;
	const EditIcon = FaEdit as React.FC<{ size?: number }>;

	return (
		<>
			<div className="content">
				<div className="paper">
					<p className="justify">
						<div style={{ display: "flex", justifyContent: "space-between", width: "100%" }}>
							<h2>–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã</h2>
							<button className="btn" onClick={openModal}>
								–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
							</button>

							{isModalOpen && <AddCounterpartyModal onClose={closeModal} />}
						</div>
						<ContractorSearch
							searchQuery={searchQuery}
							setSearchQuery={setSearchQuery} // –ü–µ—Ä–µ–¥–∞–µ–º setSearchQuery
							counterparties={counterparties} // –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
						/>
					</p>
					<p> </p>
					<p> </p>
					<div className="content-container-table-main">
					

						{loading ? (
							<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
						) : error ? (
							<p style={{ color: "red" }}>{error}</p>
						) : (
							<Table bordered responsive>
								<thead>
									<tr className="table-header">
										<td>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</td>
										<td>–ü–æ—á—Ç–∞</td>
										<td>–ò–ù–ù</td>
										<td>–ö–ü–ü</td>
										<td>–î–µ–π—Å—Ç–≤–∏—è</td>
									</tr>
								</thead>
								

								<tbody>
									{filteredCounterparties.length > 0 ? (
										filteredCounterparties.map((counterparty) => (
											<tr key={counterparty.counterparty_id}>
												<td>
													{counterparty.counterparty_type === "company"
														? counterparty.full_name
														: counterparty.full_name}
												</td>
												<td>{counterparty.email}</td>
												<td>{counterparty.inn}</td>
												<td>{counterparty.counterparty_type === "company" ? counterparty.kpp : "-"}</td>
												<td>
													<button
														className="icon-btn"
														title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
														onClick={() => {
															setSelectedData(counterparty);
															setSelectedType(counterparty.counterparty_type);
															setViewModalOpen(true);
														}}>
														<EyeIcon size={18} />
													</button>
													<button
														className="icon-btn"
														title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
														onClick={() => {
															setSelectedData(counterparty);
															setSelectedType(counterparty.counterparty_type);
															setEditModalOpen(true);
														}}>
														<EditIcon size={18} />
													</button>
												</td>
											</tr>
										))
									) : (
										<tr>
											<td colSpan="5">–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td>
										</tr>
									)}
								</tbody>
							</Table>
						)}

						{viewModalOpen && (
							<ViewCounterpartyModal
								onClose={() => setViewModalOpen(false)}
								type={selectedType}
								data={selectedData}
							/>
						)}
						{editModalOpen && (
							<EditCounterpartyModal
								onClose={() => setEditModalOpen(false)}
								type={selectedType}
								data={selectedData}
								onSave={handleSave}
							/>
						)}
					</div>
					<p> </p>
				</div>
			</div>
		</>
	);
};
